{
    "sourceFile": "src/bounty.js",
    "activeCommit": 0,
    "commits": [
        {
            "activePatchIndex": 80,
            "patches": [
                {
                    "date": 1643107097002,
                    "content": "Index: \n===================================================================\n--- \n+++ \n"
                },
                {
                    "date": 1643107581667,
                    "content": "Index: \n===================================================================\n--- \n+++ \n@@ -140,9 +140,9 @@\n         id: id,\n         node: createDigitRoulette(svg, fontSize, lineHeight, id),\n         filter: createFilter(defs, id),\n         value: Number(char),\n-        initial: Number(initial[i]),\n+        initial: ''Number(initial[i])'',\n         offset: {\n           x: 0,\n           y: offset + Number(initial[i]) * (fontSize * lineHeight),\n         },\n@@ -162,9 +162,9 @@\n       duration: duration,\n       delay: (digits.length - 1 - i) * letterAnimationDelay + animationDelay,\n       step(value) {\n         digit.offset.y =\n-          offset - (value % (fontSize * lineHeight * DIGITS_COUNT));\n+          offset + (value % (fontSize * lineHeight * DIGITS_COUNT));\n         digit.node::attr(\n           \"transform\",\n           `translate(${digit.offset.x}, ${digit.offset.y})`\n         );\n"
                },
                {
                    "date": 1643107614546,
                    "content": "Index: \n===================================================================\n--- \n+++ \n@@ -140,9 +140,9 @@\n         id: id,\n         node: createDigitRoulette(svg, fontSize, lineHeight, id),\n         filter: createFilter(defs, id),\n         value: Number(char),\n-        initial: ''Number(initial[i])'',\n+        initial: '',\n         offset: {\n           x: 0,\n           y: offset + Number(initial[i]) * (fontSize * lineHeight),\n         },\n"
                },
                {
                    "date": 1643107838620,
                    "content": "Index: \n===================================================================\n--- \n+++ \n@@ -140,9 +140,9 @@\n         id: id,\n         node: createDigitRoulette(svg, fontSize, lineHeight, id),\n         filter: createFilter(defs, id),\n         value: Number(char),\n-        initial: '',\n+        initial: Number(initial[i]),\n         offset: {\n           x: 0,\n           y: offset + Number(initial[i]) * (fontSize * lineHeight),\n         },\n"
                },
                {
                    "date": 1643108239004,
                    "content": "Index: \n===================================================================\n--- \n+++ \n@@ -2,9 +2,9 @@\n import { select, append, attr, style, text } from \"./selection\";\n import transition from \"./transition\";\n \n const DIGITS_COUNT = 10;\n-const ROTATIONS = 3;\n+const ROTATIONS = 1;\n \n const createDigitRoulette = (svg, fontSize, lineHeight, id) => {\n   const digits = [0, 1, 2, 3, 4, 5, 6, 7, 8, 9, 0];\n   const roulette = svg\n"
                },
                {
                    "date": 1643108271751,
                    "content": "Index: \n===================================================================\n--- \n+++ \n@@ -1,9 +1,9 @@\n import loop from \"./loop\";\n import { select, append, attr, style, text } from \"./selection\";\n import transition from \"./transition\";\n \n-const DIGITS_COUNT = 10;\n+const DIGITS_COUNT = 9;\n const ROTATIONS = 1;\n \n const createDigitRoulette = (svg, fontSize, lineHeight, id) => {\n   const digits = [0, 1, 2, 3, 4, 5, 6, 7, 8, 9, 0];\n"
                },
                {
                    "date": 1643108279762,
                    "content": "Index: \n===================================================================\n--- \n+++ \n@@ -1,9 +1,9 @@\n import loop from \"./loop\";\n import { select, append, attr, style, text } from \"./selection\";\n import transition from \"./transition\";\n \n-const DIGITS_COUNT = 9;\n+const DIGITS_COUNT = 1;\n const ROTATIONS = 1;\n \n const createDigitRoulette = (svg, fontSize, lineHeight, id) => {\n   const digits = [0, 1, 2, 3, 4, 5, 6, 7, 8, 9, 0];\n"
                },
                {
                    "date": 1643108306851,
                    "content": "Index: \n===================================================================\n--- \n+++ \n@@ -1,9 +1,9 @@\n import loop from \"./loop\";\n import { select, append, attr, style, text } from \"./selection\";\n import transition from \"./transition\";\n \n-const DIGITS_COUNT = 1;\n+const DIGITS_COUNT = 10;\n const ROTATIONS = 1;\n \n const createDigitRoulette = (svg, fontSize, lineHeight, id) => {\n   const digits = [0, 1, 2, 3, 4, 5, 6, 7, 8, 9, 0];\n"
                },
                {
                    "date": 1643108578798,
                    "content": "Index: \n===================================================================\n--- \n+++ \n@@ -2,9 +2,9 @@\n import { select, append, attr, style, text } from \"./selection\";\n import transition from \"./transition\";\n \n const DIGITS_COUNT = 10;\n-const ROTATIONS = 1;\n+const ROTATIONS = 5;\n \n const createDigitRoulette = (svg, fontSize, lineHeight, id) => {\n   const digits = [0, 1, 2, 3, 4, 5, 6, 7, 8, 9, 0];\n   const roulette = svg\n"
                },
                {
                    "date": 1643108621098,
                    "content": "Index: \n===================================================================\n--- \n+++ \n@@ -5,9 +5,9 @@\n const DIGITS_COUNT = 10;\n const ROTATIONS = 5;\n \n const createDigitRoulette = (svg, fontSize, lineHeight, id) => {\n-  const digits = [0, 1, 2, 3, 4, 5, 6, 7, 8, 9, 0];\n+  const digits = [1, 2, 3, 4, 5, 6, 7, 8, 9, 0];\n   const roulette = svg\n     ::append(\"g\")\n     ::attr(\"id\", `digit-${id}`)\n     ::style(\"filter\", `url(#motionFilter-${id})`);\n"
                },
                {
                    "date": 1643108635998,
                    "content": "Index: \n===================================================================\n--- \n+++ \n@@ -5,9 +5,9 @@\n const DIGITS_COUNT = 10;\n const ROTATIONS = 5;\n \n const createDigitRoulette = (svg, fontSize, lineHeight, id) => {\n-  const digits = [1, 2, 3, 4, 5, 6, 7, 8, 9, 0];\n+  const digits = ['' ,1, 2, 3, 4, 5, 6, 7, 8, 9, 0];\n   const roulette = svg\n     ::append(\"g\")\n     ::attr(\"id\", `digit-${id}`)\n     ::style(\"filter\", `url(#motionFilter-${id})`);\n"
                },
                {
                    "date": 1643108663695,
                    "content": "Index: \n===================================================================\n--- \n+++ \n@@ -5,9 +5,9 @@\n const DIGITS_COUNT = 10;\n const ROTATIONS = 5;\n \n const createDigitRoulette = (svg, fontSize, lineHeight, id) => {\n-  const digits = ['' ,1, 2, 3, 4, 5, 6, 7, 8, 9, 0];\n+  const digits = [0, 1, 2, 3, 4, 5, 6, 7, 8, 9];\n   const roulette = svg\n     ::append(\"g\")\n     ::attr(\"id\", `digit-${id}`)\n     ::style(\"filter\", `url(#motionFilter-${id})`);\n"
                },
                {
                    "date": 1643108702302,
                    "content": "Index: \n===================================================================\n--- \n+++ \n@@ -5,9 +5,9 @@\n const DIGITS_COUNT = 10;\n const ROTATIONS = 5;\n \n const createDigitRoulette = (svg, fontSize, lineHeight, id) => {\n-  const digits = [0, 1, 2, 3, 4, 5, 6, 7, 8, 9];\n+  const digits = [0, 1, 2, 3, 4, 5, 6, 7, 8, 9, 0];\n   const roulette = svg\n     ::append(\"g\")\n     ::attr(\"id\", `digit-${id}`)\n     ::style(\"filter\", `url(#motionFilter-${id})`);\n"
                },
                {
                    "date": 1643108779930,
                    "content": "Index: \n===================================================================\n--- \n+++ \n@@ -2,9 +2,9 @@\n import { select, append, attr, style, text } from \"./selection\";\n import transition from \"./transition\";\n \n const DIGITS_COUNT = 10;\n-const ROTATIONS = 5;\n+const ROTATIONS = 50;\n \n const createDigitRoulette = (svg, fontSize, lineHeight, id) => {\n   const digits = [0, 1, 2, 3, 4, 5, 6, 7, 8, 9, 0];\n   const roulette = svg\n"
                },
                {
                    "date": 1643108795199,
                    "content": "Index: \n===================================================================\n--- \n+++ \n@@ -2,9 +2,9 @@\n import { select, append, attr, style, text } from \"./selection\";\n import transition from \"./transition\";\n \n const DIGITS_COUNT = 10;\n-const ROTATIONS = 50;\n+const ROTATIONS = 1;\n \n const createDigitRoulette = (svg, fontSize, lineHeight, id) => {\n   const digits = [0, 1, 2, 3, 4, 5, 6, 7, 8, 9, 0];\n   const roulette = svg\n"
                },
                {
                    "date": 1643108911761,
                    "content": "Index: \n===================================================================\n--- \n+++ \n@@ -90,8 +90,9 @@\n   letterSpacing = 1,\n   animationDelay = 100,\n   letterAnimationDelay = 100,\n   duration = 3000,\n+  rotations = 3,\n }) => {\n   const element = select(el);\n   const computedStyle = window.getComputedStyle(element);\n   const fontSize = parseInt(computedStyle.fontSize, 10);\n@@ -154,9 +155,9 @@\n   const digits = chars.filter((char) => char.isDigit);\n   digits.forEach((digit, i) => {\n     const sourceDistance = digit.initial * (fontSize * lineHeight);\n     const targetDistance =\n-      (ROTATIONS * DIGITS_COUNT + digit.value) * (fontSize * lineHeight);\n+      (rotations * DIGITS_COUNT + digit.value) * (fontSize * lineHeight);\n     const digitTransition = transition({\n       from: sourceDistance,\n       to: targetDistance,\n       duration: duration,\n"
                },
                {
                    "date": 1643108969820,
                    "content": "Index: \n===================================================================\n--- \n+++ \n@@ -143,9 +143,9 @@\n         filter: createFilter(defs, id),\n         value: Number(char),\n         initial: Number(initial[i]),\n         offset: {\n-          x: 0,\n+          x: 10,\n           y: offset + Number(initial[i]) * (fontSize * lineHeight),\n         },\n       };\n     }\n"
                },
                {
                    "date": 1643108975883,
                    "content": "Index: \n===================================================================\n--- \n+++ \n@@ -143,9 +143,9 @@\n         filter: createFilter(defs, id),\n         value: Number(char),\n         initial: Number(initial[i]),\n         offset: {\n-          x: 10,\n+          x: 0,\n           y: offset + Number(initial[i]) * (fontSize * lineHeight),\n         },\n       };\n     }\n"
                },
                {
                    "date": 1643109076028,
                    "content": "Index: \n===================================================================\n--- \n+++ \n@@ -162,8 +162,9 @@\n       to: targetDistance,\n       duration: duration,\n       delay: (digits.length - 1 - i) * letterAnimationDelay + animationDelay,\n       step(value) {\n+        console.log('offset:', offset)\n         digit.offset.y =\n           offset + (value % (fontSize * lineHeight * DIGITS_COUNT));\n         digit.node::attr(\n           \"transform\",\n"
                },
                {
                    "date": 1643109192608,
                    "content": "Index: \n===================================================================\n--- \n+++ \n@@ -143,9 +143,9 @@\n         filter: createFilter(defs, id),\n         value: Number(char),\n         initial: Number(initial[i]),\n         offset: {\n-          x: 0,\n+          x: 100,\n           y: offset + Number(initial[i]) * (fontSize * lineHeight),\n         },\n       };\n     }\n"
                },
                {
                    "date": 1643109210238,
                    "content": "Index: \n===================================================================\n--- \n+++ \n@@ -143,9 +143,9 @@\n         filter: createFilter(defs, id),\n         value: Number(char),\n         initial: Number(initial[i]),\n         offset: {\n-          x: 100,\n+          x: 1000,\n           y: offset + Number(initial[i]) * (fontSize * lineHeight),\n         },\n       };\n     }\n"
                },
                {
                    "date": 1643109229683,
                    "content": "Index: \n===================================================================\n--- \n+++ \n@@ -132,9 +132,9 @@\n       return {\n         isDigit: false,\n         node: createCharacter(svg, char, fontSize),\n         value: char,\n-        offset: { x: 0, y: offset },\n+        offset: { x: 1000, y: offset },\n       };\n     } else {\n       return {\n         isDigit: true,\n"
                },
                {
                    "date": 1643109253636,
                    "content": "Index: \n===================================================================\n--- \n+++ \n@@ -132,9 +132,9 @@\n       return {\n         isDigit: false,\n         node: createCharacter(svg, char, fontSize),\n         value: char,\n-        offset: { x: 1000, y: offset },\n+        offset: { x: 0, y: offset },\n       };\n     } else {\n       return {\n         isDigit: true,\n@@ -143,9 +143,9 @@\n         filter: createFilter(defs, id),\n         value: Number(char),\n         initial: Number(initial[i]),\n         offset: {\n-          x: 1000,\n+          x: 0,\n           y: offset + Number(initial[i]) * (fontSize * lineHeight),\n         },\n       };\n     }\n"
                },
                {
                    "date": 1643109404721,
                    "content": "Index: \n===================================================================\n--- \n+++ \n@@ -164,9 +164,9 @@\n       delay: (digits.length - 1 - i) * letterAnimationDelay + animationDelay,\n       step(value) {\n         console.log('offset:', offset)\n         digit.offset.y =\n-          offset + (value % (fontSize * lineHeight * DIGITS_COUNT));\n+          offset + 1000 + (value % (fontSize * lineHeight * DIGITS_COUNT));\n         digit.node::attr(\n           \"transform\",\n           `translate(${digit.offset.x}, ${digit.offset.y})`\n         );\n"
                },
                {
                    "date": 1643109420159,
                    "content": "Index: \n===================================================================\n--- \n+++ \n@@ -164,9 +164,9 @@\n       delay: (digits.length - 1 - i) * letterAnimationDelay + animationDelay,\n       step(value) {\n         console.log('offset:', offset)\n         digit.offset.y =\n-          offset + 1000 + (value % (fontSize * lineHeight * DIGITS_COUNT));\n+          offset + (value % (fontSize * lineHeight * DIGITS_COUNT));\n         digit.node::attr(\n           \"transform\",\n           `translate(${digit.offset.x}, ${digit.offset.y})`\n         );\n"
                },
                {
                    "date": 1643110009501,
                    "content": "Index: \n===================================================================\n--- \n+++ \n@@ -121,9 +121,9 @@\n     }\n     return values;\n   };\n \n-  const initialString = String(initialValue || \"0\");\n+  const initialString = String(initialValue || \"\");\n   const values = prepareValues(String(value), initialString);\n   const initial = prepareValues(initialString, String(value));\n \n   const chars = values.map((char, i) => {\n"
                },
                {
                    "date": 1643110026674,
                    "content": "Index: \n===================================================================\n--- \n+++ \n@@ -121,9 +121,9 @@\n     }\n     return values;\n   };\n \n-  const initialString = String(initialValue || \"\");\n+  const initialString = String(initialValue || \"0\");\n   const values = prepareValues(String(value), initialString);\n   const initial = prepareValues(initialString, String(value));\n \n   const chars = values.map((char, i) => {\n"
                },
                {
                    "date": 1643110038077,
                    "content": "Index: \n===================================================================\n--- \n+++ \n@@ -121,9 +121,9 @@\n     }\n     return values;\n   };\n \n-  const initialString = String(initialValue || \"0\");\n+  const initialString = String(initialValue || \" \");\n   const values = prepareValues(String(value), initialString);\n   const initial = prepareValues(initialString, String(value));\n \n   const chars = values.map((char, i) => {\n"
                },
                {
                    "date": 1643110063982,
                    "content": "Index: \n===================================================================\n--- \n+++ \n@@ -121,9 +121,9 @@\n     }\n     return values;\n   };\n \n-  const initialString = String(initialValue || \" \");\n+  const initialString = String(initialValue || \"\");\n   const values = prepareValues(String(value), initialString);\n   const initial = prepareValues(initialString, String(value));\n \n   const chars = values.map((char, i) => {\n"
                },
                {
                    "date": 1643110073172,
                    "content": "Index: \n===================================================================\n--- \n+++ \n@@ -121,9 +121,9 @@\n     }\n     return values;\n   };\n \n-  const initialString = String(initialValue || \"\");\n+  const initialString = String(\"\");\n   const values = prepareValues(String(value), initialString);\n   const initial = prepareValues(initialString, String(value));\n \n   const chars = values.map((char, i) => {\n"
                },
                {
                    "date": 1643110090038,
                    "content": "Index: \n===================================================================\n--- \n+++ \n@@ -121,9 +121,10 @@\n     }\n     return values;\n   };\n \n-  const initialString = String(\"\");\n+  const initialString = String(initialValue || \"0\");\n+  console.log('initialString:', initialString)\n   const values = prepareValues(String(value), initialString);\n   const initial = prepareValues(initialString, String(value));\n \n   const chars = values.map((char, i) => {\n"
                },
                {
                    "date": 1643110140277,
                    "content": "Index: \n===================================================================\n--- \n+++ \n@@ -124,9 +124,11 @@\n \n   const initialString = String(initialValue || \"0\");\n   console.log('initialString:', initialString)\n   const values = prepareValues(String(value), initialString);\n+  console.log('values:', values)\n   const initial = prepareValues(initialString, String(value));\n+  console.log('initial:', initial)\n \n   const chars = values.map((char, i) => {\n     const id = `${i}-${salt}`;\n     if (isNaN(parseInt(char, 10)) || isNaN(parseInt(initial[i], 10))) {\n"
                },
                {
                    "date": 1643110196738,
                    "content": "Index: \n===================================================================\n--- \n+++ \n@@ -125,9 +125,10 @@\n   const initialString = String(initialValue || \"0\");\n   console.log('initialString:', initialString)\n   const values = prepareValues(String(value), initialString);\n   console.log('values:', values)\n-  const initial = prepareValues(initialString, String(value));\n+  let initial = prepareValues(initialString, String(value));\n+  initial = ['', '', '', '', '', '' ]\n   console.log('initial:', initial)\n \n   const chars = values.map((char, i) => {\n     const id = `${i}-${salt}`;\n"
                },
                {
                    "date": 1643110218873,
                    "content": "Index: \n===================================================================\n--- \n+++ \n@@ -126,9 +126,9 @@\n   console.log('initialString:', initialString)\n   const values = prepareValues(String(value), initialString);\n   console.log('values:', values)\n   let initial = prepareValues(initialString, String(value));\n-  initial = ['', '', '', '', '', '' ]\n+  initial = ['.', '', '', '', '', '' ]\n   console.log('initial:', initial)\n \n   const chars = values.map((char, i) => {\n     const id = `${i}-${salt}`;\n"
                },
                {
                    "date": 1643110247865,
                    "content": "Index: \n===================================================================\n--- \n+++ \n@@ -125,10 +125,9 @@\n   const initialString = String(initialValue || \"0\");\n   console.log('initialString:', initialString)\n   const values = prepareValues(String(value), initialString);\n   console.log('values:', values)\n-  let initial = prepareValues(initialString, String(value));\n-  initial = ['.', '', '', '', '', '' ]\n+  const initial = prepareValues(initialString, String(value));\n   console.log('initial:', initial)\n \n   const chars = values.map((char, i) => {\n     const id = `${i}-${salt}`;\n"
                },
                {
                    "date": 1643110300429,
                    "content": "Index: \n===================================================================\n--- \n+++ \n@@ -5,9 +5,9 @@\n const DIGITS_COUNT = 10;\n const ROTATIONS = 1;\n \n const createDigitRoulette = (svg, fontSize, lineHeight, id) => {\n-  const digits = [0, 1, 2, 3, 4, 5, 6, 7, 8, 9, 0];\n+  const digits = [1, 2, 3, 4, 5, 6, 7, 8, 9, 0];\n   const roulette = svg\n     ::append(\"g\")\n     ::attr(\"id\", `digit-${id}`)\n     ::style(\"filter\", `url(#motionFilter-${id})`);\n"
                },
                {
                    "date": 1643110319810,
                    "content": "Index: \n===================================================================\n--- \n+++ \n@@ -5,9 +5,9 @@\n const DIGITS_COUNT = 10;\n const ROTATIONS = 1;\n \n const createDigitRoulette = (svg, fontSize, lineHeight, id) => {\n-  const digits = [1, 2, 3, 4, 5, 6, 7, 8, 9, 0];\n+  const digits = [0, 1, 2, 3, 4, 5, 6, 7, 8, 9];\n   const roulette = svg\n     ::append(\"g\")\n     ::attr(\"id\", `digit-${id}`)\n     ::style(\"filter\", `url(#motionFilter-${id})`);\n"
                },
                {
                    "date": 1643110338041,
                    "content": "Index: \n===================================================================\n--- \n+++ \n@@ -5,9 +5,9 @@\n const DIGITS_COUNT = 10;\n const ROTATIONS = 1;\n \n const createDigitRoulette = (svg, fontSize, lineHeight, id) => {\n-  const digits = [0, 1, 2, 3, 4, 5, 6, 7, 8, 9];\n+  const digits = ['', 1, 2, 3, 4, 5, 6, 7, 8, 9, 0];\n   const roulette = svg\n     ::append(\"g\")\n     ::attr(\"id\", `digit-${id}`)\n     ::style(\"filter\", `url(#motionFilter-${id})`);\n"
                },
                {
                    "date": 1643117440100,
                    "content": "Index: \n===================================================================\n--- \n+++ \n@@ -87,9 +87,9 @@\n   value,\n   initialValue = null,\n   lineHeight = 1.35,\n   letterSpacing = 1,\n-  animationDelay = 100,\n+  animationDelay = 1000,\n   letterAnimationDelay = 100,\n   duration = 3000,\n   rotations = 3,\n }) => {\n"
                },
                {
                    "date": 1643117465662,
                    "content": "Index: \n===================================================================\n--- \n+++ \n@@ -87,9 +87,9 @@\n   value,\n   initialValue = null,\n   lineHeight = 1.35,\n   letterSpacing = 1,\n-  animationDelay = 1000,\n+  animationDelay = 5000,\n   letterAnimationDelay = 100,\n   duration = 3000,\n   rotations = 3,\n }) => {\n"
                },
                {
                    "date": 1643117482918,
                    "content": "Index: \n===================================================================\n--- \n+++ \n@@ -87,9 +87,9 @@\n   value,\n   initialValue = null,\n   lineHeight = 1.35,\n   letterSpacing = 1,\n-  animationDelay = 5000,\n+  animationDelay = 0,\n   letterAnimationDelay = 100,\n   duration = 3000,\n   rotations = 3,\n }) => {\n"
                },
                {
                    "date": 1643117514393,
                    "content": "Index: \n===================================================================\n--- \n+++ \n@@ -88,9 +88,9 @@\n   initialValue = null,\n   lineHeight = 1.35,\n   letterSpacing = 1,\n   animationDelay = 0,\n-  letterAnimationDelay = 100,\n+  letterAnimationDelay = 300,\n   duration = 3000,\n   rotations = 3,\n }) => {\n   const element = select(el);\n"
                },
                {
                    "date": 1643117598639,
                    "content": "Index: \n===================================================================\n--- \n+++ \n@@ -156,8 +156,9 @@\n \n   const transitions = [];\n   const digits = chars.filter((char) => char.isDigit);\n   digits.forEach((digit, i) => {\n+    console.log('i:', i)\n     const sourceDistance = digit.initial * (fontSize * lineHeight);\n     const targetDistance =\n       (rotations * DIGITS_COUNT + digit.value) * (fontSize * lineHeight);\n     const digitTransition = transition({\n"
                },
                {
                    "date": 1643117637029,
                    "content": "Index: \n===================================================================\n--- \n+++ \n@@ -159,9 +159,9 @@\n   digits.forEach((digit, i) => {\n     console.log('i:', i)\n     const sourceDistance = digit.initial * (fontSize * lineHeight);\n     const targetDistance =\n-      (rotations * DIGITS_COUNT + digit.value) * (fontSize * lineHeight);\n+      (rotations * i * DIGITS_COUNT + digit.value) * (fontSize * lineHeight);\n     const digitTransition = transition({\n       from: sourceDistance,\n       to: targetDistance,\n       duration: duration,\n"
                },
                {
                    "date": 1643117657445,
                    "content": "Index: \n===================================================================\n--- \n+++ \n@@ -90,9 +90,9 @@\n   letterSpacing = 1,\n   animationDelay = 0,\n   letterAnimationDelay = 300,\n   duration = 3000,\n-  rotations = 3,\n+  rotations = 1,\n }) => {\n   const element = select(el);\n   const computedStyle = window.getComputedStyle(element);\n   const fontSize = parseInt(computedStyle.fontSize, 10);\n"
                },
                {
                    "date": 1643117692444,
                    "content": "Index: \n===================================================================\n--- \n+++ \n@@ -5,9 +5,9 @@\n const DIGITS_COUNT = 10;\n const ROTATIONS = 1;\n \n const createDigitRoulette = (svg, fontSize, lineHeight, id) => {\n-  const digits = ['', 1, 2, 3, 4, 5, 6, 7, 8, 9, 0];\n+  const digits = [0, 1, 2, 3, 4, 5, 6, 7, 8, 9, 0];\n   const roulette = svg\n     ::append(\"g\")\n     ::attr(\"id\", `digit-${id}`)\n     ::style(\"filter\", `url(#motionFilter-${id})`);\n"
                },
                {
                    "date": 1643117714021,
                    "content": "Index: \n===================================================================\n--- \n+++ \n@@ -88,9 +88,9 @@\n   initialValue = null,\n   lineHeight = 1.35,\n   letterSpacing = 1,\n   animationDelay = 0,\n-  letterAnimationDelay = 300,\n+  letterAnimationDelay = 0,\n   duration = 3000,\n   rotations = 1,\n }) => {\n   const element = select(el);\n"
                },
                {
                    "date": 1643117873332,
                    "content": "Index: \n===================================================================\n--- \n+++ \n@@ -159,9 +159,9 @@\n   digits.forEach((digit, i) => {\n     console.log('i:', i)\n     const sourceDistance = digit.initial * (fontSize * lineHeight);\n     const targetDistance =\n-      (rotations * i * DIGITS_COUNT + digit.value) * (fontSize * lineHeight);\n+      (rotations * Math.pow(10, i) * DIGITS_COUNT + digit.value) * (fontSize * lineHeight);\n     const digitTransition = transition({\n       from: sourceDistance,\n       to: targetDistance,\n       duration: duration,\n"
                },
                {
                    "date": 1643117889178,
                    "content": "Index: \n===================================================================\n--- \n+++ \n@@ -159,9 +159,9 @@\n   digits.forEach((digit, i) => {\n     console.log('i:', i)\n     const sourceDistance = digit.initial * (fontSize * lineHeight);\n     const targetDistance =\n-      (rotations * Math.pow(10, i) * DIGITS_COUNT + digit.value) * (fontSize * lineHeight);\n+      (rotations * Math.pow(2, i) * DIGITS_COUNT + digit.value) * (fontSize * lineHeight);\n     const digitTransition = transition({\n       from: sourceDistance,\n       to: targetDistance,\n       duration: duration,\n"
                },
                {
                    "date": 1643117928797,
                    "content": "Index: \n===================================================================\n--- \n+++ \n@@ -159,9 +159,9 @@\n   digits.forEach((digit, i) => {\n     console.log('i:', i)\n     const sourceDistance = digit.initial * (fontSize * lineHeight);\n     const targetDistance =\n-      (rotations * Math.pow(2, i) * DIGITS_COUNT + digit.value) * (fontSize * lineHeight);\n+      (rotations * i * DIGITS_COUNT + digit.value) * (fontSize * lineHeight);\n     const digitTransition = transition({\n       from: sourceDistance,\n       to: targetDistance,\n       duration: duration,\n"
                },
                {
                    "date": 1643118164111,
                    "content": "Index: \n===================================================================\n--- \n+++ \n@@ -111,8 +111,9 @@\n   createMask(defs, salt);\n \n   const prepareValues = (value, secondValue) => {\n     const values = String(value).replace(/ /g, \"\\u00a0\").split(\"\");\n+    console.log('values:', values)\n \n     const digitIndex = String(value).search(/\\d/);\n     while (secondValue.length > values.length) {\n       const char =\n"
                },
                {
                    "date": 1643118181952,
                    "content": "Index: \n===================================================================\n--- \n+++ \n@@ -111,9 +111,9 @@\n   createMask(defs, salt);\n \n   const prepareValues = (value, secondValue) => {\n     const values = String(value).replace(/ /g, \"\\u00a0\").split(\"\");\n-    console.log('values:', values)\n+    console.log('valuesASDF:', values)\n \n     const digitIndex = String(value).search(/\\d/);\n     while (secondValue.length > values.length) {\n       const char =\n"
                },
                {
                    "date": 1643119772108,
                    "content": "Index: \n===================================================================\n--- \n+++ \n@@ -193,8 +193,9 @@\n               cancel();\n             }\n           : (e) => e,\n     });\n+    console.log('digitTransition:', digitTransition)\n     transitions.push(digitTransition);\n   });\n \n   const update = (timestamp) => {\n"
                },
                {
                    "date": 1643119968918,
                    "content": "Index: \n===================================================================\n--- \n+++ \n@@ -172,9 +172,9 @@\n         digit.offset.y =\n           offset + (value % (fontSize * lineHeight * DIGITS_COUNT));\n         digit.node::attr(\n           \"transform\",\n-          `translate(${digit.offset.x}, ${digit.offset.y})`\n+          `translate(${digit.offset.x}, ${digit.offset.y + 10})`\n         );\n         const filterOrigin = (sourceDistance + targetDistance) / 2;\n         const motionValue = Number(\n           Math.abs(\n"
                },
                {
                    "date": 1643119980861,
                    "content": "Index: \n===================================================================\n--- \n+++ \n@@ -172,9 +172,9 @@\n         digit.offset.y =\n           offset + (value % (fontSize * lineHeight * DIGITS_COUNT));\n         digit.node::attr(\n           \"transform\",\n-          `translate(${digit.offset.x}, ${digit.offset.y + 10})`\n+          `translate(${digit.offset.x}, ${digit.offset.y + 1000})`\n         );\n         const filterOrigin = (sourceDistance + targetDistance) / 2;\n         const motionValue = Number(\n           Math.abs(\n"
                },
                {
                    "date": 1643120004580,
                    "content": "Index: \n===================================================================\n--- \n+++ \n@@ -172,9 +172,9 @@\n         digit.offset.y =\n           offset + (value % (fontSize * lineHeight * DIGITS_COUNT));\n         digit.node::attr(\n           \"transform\",\n-          `translate(${digit.offset.x}, ${digit.offset.y + 1000})`\n+          `translate(${digit.offset.x}, ${digit.offset.y - 50})`\n         );\n         const filterOrigin = (sourceDistance + targetDistance) / 2;\n         const motionValue = Number(\n           Math.abs(\n"
                },
                {
                    "date": 1643120027469,
                    "content": "Index: \n===================================================================\n--- \n+++ \n@@ -172,9 +172,9 @@\n         digit.offset.y =\n           offset + (value % (fontSize * lineHeight * DIGITS_COUNT));\n         digit.node::attr(\n           \"transform\",\n-          `translate(${digit.offset.x}, ${digit.offset.y - 50})`\n+          `translate(${digit.offset.x}, ${digit.offset.y})`\n         );\n         const filterOrigin = (sourceDistance + targetDistance) / 2;\n         const motionValue = Number(\n           Math.abs(\n"
                },
                {
                    "date": 1643120144926,
                    "content": "Index: \n===================================================================\n--- \n+++ \n@@ -111,9 +111,8 @@\n   createMask(defs, salt);\n \n   const prepareValues = (value, secondValue) => {\n     const values = String(value).replace(/ /g, \"\\u00a0\").split(\"\");\n-    console.log('valuesASDF:', values)\n \n     const digitIndex = String(value).search(/\\d/);\n     while (secondValue.length > values.length) {\n       const char =\n@@ -167,9 +166,9 @@\n       to: targetDistance,\n       duration: duration,\n       delay: (digits.length - 1 - i) * letterAnimationDelay + animationDelay,\n       step(value) {\n-        console.log('offset:', offset)\n+        console.log('offsetASDF:', offset)\n         digit.offset.y =\n           offset + (value % (fontSize * lineHeight * DIGITS_COUNT));\n         digit.node::attr(\n           \"transform\",\n"
                },
                {
                    "date": 1643120194661,
                    "content": "Index: \n===================================================================\n--- \n+++ \n@@ -174,8 +174,9 @@\n           \"transform\",\n           `translate(${digit.offset.x}, ${digit.offset.y})`\n         );\n         const filterOrigin = (sourceDistance + targetDistance) / 2;\n+        console.log('filterOrigin:', filterOrigin)\n         const motionValue = Number(\n           Math.abs(\n             Math.abs(Math.abs(value - filterOrigin) - filterOrigin) -\n               sourceDistance\n"
                },
                {
                    "date": 1643120228822,
                    "content": "Index: \n===================================================================\n--- \n+++ \n@@ -173,10 +173,9 @@\n         digit.node::attr(\n           \"transform\",\n           `translate(${digit.offset.x}, ${digit.offset.y})`\n         );\n-        const filterOrigin = (sourceDistance + targetDistance) / 2;\n-        console.log('filterOrigin:', filterOrigin)\n+        const filterOrigin = (sourceDistance + targetDistance) / 20;\n         const motionValue = Number(\n           Math.abs(\n             Math.abs(Math.abs(value - filterOrigin) - filterOrigin) -\n               sourceDistance\n"
                },
                {
                    "date": 1643120241583,
                    "content": "Index: \n===================================================================\n--- \n+++ \n@@ -173,9 +173,9 @@\n         digit.node::attr(\n           \"transform\",\n           `translate(${digit.offset.x}, ${digit.offset.y})`\n         );\n-        const filterOrigin = (sourceDistance + targetDistance) / 20;\n+        const filterOrigin = (sourceDistance + targetDistance);\n         const motionValue = Number(\n           Math.abs(\n             Math.abs(Math.abs(value - filterOrigin) - filterOrigin) -\n               sourceDistance\n"
                },
                {
                    "date": 1643120266538,
                    "content": "Index: \n===================================================================\n--- \n+++ \n@@ -173,9 +173,9 @@\n         digit.node::attr(\n           \"transform\",\n           `translate(${digit.offset.x}, ${digit.offset.y})`\n         );\n-        const filterOrigin = (sourceDistance + targetDistance);\n+        const filterOrigin = (sourceDistance + targetDistance) / 3;\n         const motionValue = Number(\n           Math.abs(\n             Math.abs(Math.abs(value - filterOrigin) - filterOrigin) -\n               sourceDistance\n"
                },
                {
                    "date": 1643120278013,
                    "content": "Index: \n===================================================================\n--- \n+++ \n@@ -173,9 +173,9 @@\n         digit.node::attr(\n           \"transform\",\n           `translate(${digit.offset.x}, ${digit.offset.y})`\n         );\n-        const filterOrigin = (sourceDistance + targetDistance) / 3;\n+        const filterOrigin = (sourceDistance + targetDistance) / 2;\n         const motionValue = Number(\n           Math.abs(\n             Math.abs(Math.abs(value - filterOrigin) - filterOrigin) -\n               sourceDistance\n"
                },
                {
                    "date": 1643120317176,
                    "content": "Index: \n===================================================================\n--- \n+++ \n@@ -177,11 +177,12 @@\n         const filterOrigin = (sourceDistance + targetDistance) / 2;\n         const motionValue = Number(\n           Math.abs(\n             Math.abs(Math.abs(value - filterOrigin) - filterOrigin) -\n-              sourceDistance\n-          ) / 100\n-        ).toFixed(1);\n+            sourceDistance\n+            ) / 100\n+            ).toFixed(1);\n+            console.log('motionValue:', motionValue)\n         digit.filter::attr(\"stdDeviation\", `0 ${motionValue}`);\n       },\n       end:\n         i === 0\n"
                },
                {
                    "date": 1643120482845,
                    "content": "Index: \n===================================================================\n--- \n+++ \n@@ -180,9 +180,8 @@\n             Math.abs(Math.abs(value - filterOrigin) - filterOrigin) -\n             sourceDistance\n             ) / 100\n             ).toFixed(1);\n-            console.log('motionValue:', motionValue)\n         digit.filter::attr(\"stdDeviation\", `0 ${motionValue}`);\n       },\n       end:\n         i === 0\n"
                },
                {
                    "date": 1643121355284,
                    "content": "Index: \n===================================================================\n--- \n+++ \n@@ -18,8 +18,9 @@\n       ::attr(\"y\", -i * fontSize * lineHeight)\n       ::text(el);\n   });\n \n+  console.log('roulette:', roulette)\n   return roulette;\n };\n \n const createCharacter = (svg, el, fontSize) =>\n"
                },
                {
                    "date": 1643121506384,
                    "content": "Index: \n===================================================================\n--- \n+++ \n@@ -169,9 +169,9 @@\n       delay: (digits.length - 1 - i) * letterAnimationDelay + animationDelay,\n       step(value) {\n         console.log('offsetASDF:', offset)\n         digit.offset.y =\n-          offset + (value % (fontSize * lineHeight * DIGITS_COUNT));\n+          offset - (value % (fontSize * lineHeight * DIGITS_COUNT));\n         digit.node::attr(\n           \"transform\",\n           `translate(${digit.offset.x}, ${digit.offset.y})`\n         );\n"
                },
                {
                    "date": 1643121602187,
                    "content": "Index: \n===================================================================\n--- \n+++ \n@@ -5,9 +5,10 @@\n const DIGITS_COUNT = 10;\n const ROTATIONS = 1;\n \n const createDigitRoulette = (svg, fontSize, lineHeight, id) => {\n-  const digits = [0, 1, 2, 3, 4, 5, 6, 7, 8, 9, 0];\n+  const digits = [0, 9,8,7,6,5,4,3,2,1, 0];\n+  // const digits = [0, 1, 2, 3, 4, 5, 6, 7, 8, 9, 0];\n   const roulette = svg\n     ::append(\"g\")\n     ::attr(\"id\", `digit-${id}`)\n     ::style(\"filter\", `url(#motionFilter-${id})`);\n"
                },
                {
                    "date": 1643121695064,
                    "content": "Index: \n===================================================================\n--- \n+++ \n@@ -170,9 +170,9 @@\n       delay: (digits.length - 1 - i) * letterAnimationDelay + animationDelay,\n       step(value) {\n         console.log('offsetASDF:', offset)\n         digit.offset.y =\n-          offset - (value % (fontSize * lineHeight * DIGITS_COUNT));\n+          offset + (value % (fontSize * lineHeight * DIGITS_COUNT));\n         digit.node::attr(\n           \"transform\",\n           `translate(${digit.offset.x}, ${digit.offset.y})`\n         );\n"
                },
                {
                    "date": 1643122562829,
                    "content": "Index: \n===================================================================\n--- \n+++ \n@@ -168,9 +168,9 @@\n       to: targetDistance,\n       duration: duration,\n       delay: (digits.length - 1 - i) * letterAnimationDelay + animationDelay,\n       step(value) {\n-        console.log('offsetASDF:', offset)\n+        console.log('step value:', value)\n         digit.offset.y =\n           offset + (value % (fontSize * lineHeight * DIGITS_COUNT));\n         digit.node::attr(\n           \"transform\",\n"
                },
                {
                    "date": 1643122643143,
                    "content": "Index: \n===================================================================\n--- \n+++ \n@@ -168,9 +168,8 @@\n       to: targetDistance,\n       duration: duration,\n       delay: (digits.length - 1 - i) * letterAnimationDelay + animationDelay,\n       step(value) {\n-        console.log('step value:', value)\n         digit.offset.y =\n           offset + (value % (fontSize * lineHeight * DIGITS_COUNT));\n         digit.node::attr(\n           \"transform\",\n"
                },
                {
                    "date": 1643122696509,
                    "content": "Index: \n===================================================================\n--- \n+++ \n@@ -106,9 +106,11 @@\n   const canvasHeight = fontSize * lineHeight + marginBottom;\n \n   element.innerHTML = \"\";\n   const root = element::append(\"svg\");\n+  console.log('root:', root)\n   const svg = root::append(\"svg\")::attr(\"mask\", `url(#mask-${salt})`);\n+  console.log('svg:', svg)\n   const defs = root::append(\"defs\");\n   createGradient(defs, salt);\n   createMask(defs, salt);\n \n"
                },
                {
                    "date": 1643122762180,
                    "content": "Index: \n===================================================================\n--- \n+++ \n@@ -106,11 +106,9 @@\n   const canvasHeight = fontSize * lineHeight + marginBottom;\n \n   element.innerHTML = \"\";\n   const root = element::append(\"svg\");\n-  console.log('root:', root)\n   const svg = root::append(\"svg\")::attr(\"mask\", `url(#mask-${salt})`);\n-  console.log('svg:', svg)\n   const defs = root::append(\"defs\");\n   createGradient(defs, salt);\n   createMask(defs, salt);\n \n"
                },
                {
                    "date": 1643122856095,
                    "content": "Index: \n===================================================================\n--- \n+++ \n@@ -14,9 +14,9 @@\n     ::style(\"filter\", `url(#motionFilter-${id})`);\n \n   digits.forEach((el, i) => {\n     roulette\n-      ::append(\"text\")\n+      ::prepend(\"text\")\n       ::attr(\"y\", -i * fontSize * lineHeight)\n       ::text(el);\n   });\n \n"
                },
                {
                    "date": 1643122868445,
                    "content": "Index: \n===================================================================\n--- \n+++ \n@@ -5,10 +5,10 @@\n const DIGITS_COUNT = 10;\n const ROTATIONS = 1;\n \n const createDigitRoulette = (svg, fontSize, lineHeight, id) => {\n-  const digits = [0, 9,8,7,6,5,4,3,2,1, 0];\n-  // const digits = [0, 1, 2, 3, 4, 5, 6, 7, 8, 9, 0];\n+  // const digits = [0, 9,8,7,6,5,4,3,2,1, 0];\n+  const digits = [0, 1, 2, 3, 4, 5, 6, 7, 8, 9, 0];\n   const roulette = svg\n     ::append(\"g\")\n     ::attr(\"id\", `digit-${id}`)\n     ::style(\"filter\", `url(#motionFilter-${id})`);\n"
                },
                {
                    "date": 1643123063426,
                    "content": "Index: \n===================================================================\n--- \n+++ \n@@ -1,6 +1,6 @@\n import loop from \"./loop\";\n-import { select, append, attr, style, text } from \"./selection\";\n+import { select, append, prepend, attr, style, text } from \"./selection\";\n import transition from \"./transition\";\n \n const DIGITS_COUNT = 10;\n const ROTATIONS = 1;\n"
                },
                {
                    "date": 1643123385728,
                    "content": "Index: \n===================================================================\n--- \n+++ \n@@ -14,9 +14,9 @@\n     ::style(\"filter\", `url(#motionFilter-${id})`);\n \n   digits.forEach((el, i) => {\n     roulette\n-      ::prepend(\"text\")\n+      ::append(\"text\")\n       ::attr(\"y\", -i * fontSize * lineHeight)\n       ::text(el);\n   });\n \n"
                },
                {
                    "date": 1643123401933,
                    "content": "Index: \n===================================================================\n--- \n+++ \n@@ -14,9 +14,9 @@\n     ::style(\"filter\", `url(#motionFilter-${id})`);\n \n   digits.forEach((el, i) => {\n     roulette\n-      ::append(\"text\")\n+      ::prepend(\"text\")\n       ::attr(\"y\", -i * fontSize * lineHeight)\n       ::text(el);\n   });\n \n"
                },
                {
                    "date": 1643123436214,
                    "content": "Index: \n===================================================================\n--- \n+++ \n@@ -14,9 +14,9 @@\n     ::style(\"filter\", `url(#motionFilter-${id})`);\n \n   digits.forEach((el, i) => {\n     roulette\n-      ::prepend(\"text\")\n+      ::append(\"text\")\n       ::attr(\"y\", -i * fontSize * lineHeight)\n       ::text(el);\n   });\n \n"
                },
                {
                    "date": 1643123494356,
                    "content": "Index: \n===================================================================\n--- \n+++ \n@@ -15,9 +15,9 @@\n \n   digits.forEach((el, i) => {\n     roulette\n       ::append(\"text\")\n-      ::attr(\"y\", -i * fontSize * lineHeight)\n+      ::attr(\"y\", i * fontSize * lineHeight)\n       ::text(el);\n   });\n \n   console.log('roulette:', roulette)\n"
                },
                {
                    "date": 1643123576734,
                    "content": "Index: \n===================================================================\n--- \n+++ \n@@ -169,9 +169,9 @@\n       duration: duration,\n       delay: (digits.length - 1 - i) * letterAnimationDelay + animationDelay,\n       step(value) {\n         digit.offset.y =\n-          offset + (value % (fontSize * lineHeight * DIGITS_COUNT));\n+          offset - (value % (fontSize * lineHeight * DIGITS_COUNT));\n         digit.node::attr(\n           \"transform\",\n           `translate(${digit.offset.x}, ${digit.offset.y})`\n         );\n"
                }
            ],
            "date": 1643107097002,
            "name": "Commit-0",
            "content": "import loop from \"./loop\";\nimport { select, append, attr, style, text } from \"./selection\";\nimport transition from \"./transition\";\n\nconst DIGITS_COUNT = 10;\nconst ROTATIONS = 3;\n\nconst createDigitRoulette = (svg, fontSize, lineHeight, id) => {\n  const digits = [0, 1, 2, 3, 4, 5, 6, 7, 8, 9, 0];\n  const roulette = svg\n    ::append(\"g\")\n    ::attr(\"id\", `digit-${id}`)\n    ::style(\"filter\", `url(#motionFilter-${id})`);\n\n  digits.forEach((el, i) => {\n    roulette\n      ::append(\"text\")\n      ::attr(\"y\", -i * fontSize * lineHeight)\n      ::text(el);\n  });\n\n  return roulette;\n};\n\nconst createCharacter = (svg, el, fontSize) =>\n  svg::append(\"g\")::append(\"text\")::text(el);\n\nconst createFilter = (defs, id) =>\n  defs\n    ::append(\"filter\")\n    ::attr(\"id\", `motionFilter-${id}`)\n    ::attr(\"width\", \"300%\")\n    ::attr(\"x\", \"-100%\")\n    ::append(\"feGaussianBlur\")\n    ::attr(\"class\", \"blurValues\")\n    ::attr(\"in\", \"SourceGraphic\")\n    ::attr(\"stdDeviation\", \"0 0\");\n\nconst createGradient = (defs, id) =>\n  defs\n    ::append(\"linearGradient\")\n    ::attr(\"id\", `gradient-${id}`)\n    ::attr(\"x1\", \"0%\")\n    ::attr(\"y1\", \"0%\")\n    ::attr(\"x2\", \"0%\")\n    ::attr(\"y2\", \"100%\")\n    ::append(\"stop\")\n    ::attr(\"offset\", \"0\")\n    ::attr(\"stop-color\", \"white\")\n    ::attr(\"stop-opacity\", \"0\")\n    ::select(`#gradient-${id}`)\n    ::append(\"stop\")\n    ::attr(\"offset\", \"0.2\")\n    ::attr(\"stop-color\", \"white\")\n    ::attr(\"stop-opacity\", \"1\")\n    ::select(`#gradient-${id}`)\n    ::append(\"stop\")\n    ::attr(\"offset\", \"0.8\")\n    ::attr(\"stop-color\", \"white\")\n    ::attr(\"stop-opacity\", \"1\")\n    ::select(`#gradient-${id}`)\n    ::append(\"stop\")\n    ::attr(\"offset\", \"1\")\n    ::attr(\"stop-color\", \"white\")\n    ::attr(\"stop-opacity\", \"0\");\n\nconst createMask = (defs, id) =>\n  defs\n    ::append(\"mask\")\n    ::attr(\"id\", `mask-${id}`)\n    ::append(\"rect\")\n    ::attr(\"x\", 0)\n    ::attr(\"y\", 0)\n    ::attr(\"width\", \"100%\")\n    ::attr(\"height\", \"100%\")\n    ::attr(\"fill\", `url(#gradient-${id})`);\n\nconst setViewBox = (svg, width, height) => {\n  svg::attr(\"width\", width);\n  svg::attr(\"height\", height);\n  svg::attr(\"viewBox\", `0 0 ${width} ${height}`);\n  svg::style(\"overflow\", \"hidden\");\n};\n\nexport default ({\n  el,\n  value,\n  initialValue = null,\n  lineHeight = 1.35,\n  letterSpacing = 1,\n  animationDelay = 100,\n  letterAnimationDelay = 100,\n  duration = 3000,\n}) => {\n  const element = select(el);\n  const computedStyle = window.getComputedStyle(element);\n  const fontSize = parseInt(computedStyle.fontSize, 10);\n  const marginBottom = (fontSize * lineHeight - fontSize) / 2 + fontSize / 10;\n  const offset = fontSize * lineHeight - marginBottom;\n  const salt = Date.now();\n\n  let canvasWidth = 0;\n  const canvasHeight = fontSize * lineHeight + marginBottom;\n\n  element.innerHTML = \"\";\n  const root = element::append(\"svg\");\n  const svg = root::append(\"svg\")::attr(\"mask\", `url(#mask-${salt})`);\n  const defs = root::append(\"defs\");\n  createGradient(defs, salt);\n  createMask(defs, salt);\n\n  const prepareValues = (value, secondValue) => {\n    const values = String(value).replace(/ /g, \"\\u00a0\").split(\"\");\n\n    const digitIndex = String(value).search(/\\d/);\n    while (secondValue.length > values.length) {\n      const char =\n        secondValue[secondValue.length - values.length - 1 + digitIndex];\n      values.splice(digitIndex, 0, isNaN(parseInt(char, 10)) ? char : \"0\");\n    }\n    return values;\n  };\n\n  const initialString = String(initialValue || \"0\");\n  const values = prepareValues(String(value), initialString);\n  const initial = prepareValues(initialString, String(value));\n\n  const chars = values.map((char, i) => {\n    const id = `${i}-${salt}`;\n    if (isNaN(parseInt(char, 10)) || isNaN(parseInt(initial[i], 10))) {\n      return {\n        isDigit: false,\n        node: createCharacter(svg, char, fontSize),\n        value: char,\n        offset: { x: 0, y: offset },\n      };\n    } else {\n      return {\n        isDigit: true,\n        id: id,\n        node: createDigitRoulette(svg, fontSize, lineHeight, id),\n        filter: createFilter(defs, id),\n        value: Number(char),\n        initial: Number(initial[i]),\n        offset: {\n          x: 0,\n          y: offset + Number(initial[i]) * (fontSize * lineHeight),\n        },\n      };\n    }\n  });\n\n  const transitions = [];\n  const digits = chars.filter((char) => char.isDigit);\n  digits.forEach((digit, i) => {\n    const sourceDistance = digit.initial * (fontSize * lineHeight);\n    const targetDistance =\n      (ROTATIONS * DIGITS_COUNT + digit.value) * (fontSize * lineHeight);\n    const digitTransition = transition({\n      from: sourceDistance,\n      to: targetDistance,\n      duration: duration,\n      delay: (digits.length - 1 - i) * letterAnimationDelay + animationDelay,\n      step(value) {\n        digit.offset.y =\n          offset - (value % (fontSize * lineHeight * DIGITS_COUNT));\n        digit.node::attr(\n          \"transform\",\n          `translate(${digit.offset.x}, ${digit.offset.y})`\n        );\n        const filterOrigin = (sourceDistance + targetDistance) / 2;\n        const motionValue = Number(\n          Math.abs(\n            Math.abs(Math.abs(value - filterOrigin) - filterOrigin) -\n              sourceDistance\n          ) / 100\n        ).toFixed(1);\n        digit.filter::attr(\"stdDeviation\", `0 ${motionValue}`);\n      },\n      end:\n        i === 0\n          ? () => {\n              element.querySelectorAll('[style*=\"filter\"]').forEach((ele) => {\n                ele.style.filter = \"\";\n              });\n              cancel();\n            }\n          : (e) => e,\n    });\n    transitions.push(digitTransition);\n  });\n\n  const update = (timestamp) => {\n    canvasWidth = 0;\n    chars.forEach((char) => {\n      const { width } = char.node.getBBox();\n\n      char.offset.x = canvasWidth;\n      // set proper kerning for proportional fonts\n      if (char.isDigit) {\n        [...char.node.childNodes].forEach((element) => {\n          const { width: letterWidth } = element.getBBox();\n          const offset = (width - letterWidth) / 2;\n          element.setAttribute(\"x\", offset);\n        });\n      }\n\n      canvasWidth += width + letterSpacing;\n    });\n    canvasWidth -= letterSpacing;\n\n    chars.forEach((char) => {\n      char.node::attr(\n        \"transform\",\n        `translate(${char.offset.x}, ${char.offset.y})`\n      );\n    });\n\n    setViewBox(root, canvasWidth, canvasHeight);\n    transitions.forEach((transition) => transition.update(timestamp));\n  };\n\n  const cancel = loop(update);\n\n  const pause = () => {\n    transitions.forEach((transition) => transition.pause());\n  };\n  const resume = () => {\n    transitions.forEach((transition) => transition.resume());\n  };\n\n  return { cancel, pause, resume };\n};\n"
        }
    ]
}